UNDER DEVELOPMENT /// tests

* Adding Tox filters to Tox filters
:PROPERTIES:
:ID:       4B455210-DC5E-4F27-990C-8631E1AF52E2
:eval-id:  34
:END:

** Example 1
:PROPERTIES:
:ID:       A5F476EA-3CC8-4DAE-877D-8920CC1B5F07
:eval-id:  46
:END:
#+BEGIN_SRC sclang
{ SinOsc.arps(2000).perc } +> \level1a *> 0.1;
#+END_SRC

#+BEGIN_SRC sclang
{ SinOsc.arps(1800).perc } +> \level2a **>.xo \level1a;
#+END_SRC

#+BEGIN_SRC sclang
{ SinOsc.arps(1500).perc } +> \level3a **>>.xo \_level1a;
#+END_SRC

#+BEGIN_SRC sclang
\level1a*>.xooxxoxxx \level1a; // this creates an empty chuck ....
#+END_SRC


Testing an error in coding here:
#+BEGIN_SRC sclang
\level1 *>.xooxxo \level1a; // this creates an empty chuck ....
#+END_SRC

#+BEGIN_SRC sclang
{ WhiteNoise.arps.perc } +> \level1;
#+END_SRC

** Example 2
:PROPERTIES:
:ID:       A8822947-5653-4EB7-8628-6C835652BF5E
:eval-id:  8
:END:

#+BEGIN_SRC sclang
{ SinOsc.arps(1800).perc } +> \level1b *> [0.1, 0.2].pseq;
{ SinOsc.arps(1500).perc } +> \level2b **>.xoo \level1b;
{ SinOsc.arps(1200).perc } +> \level3b **>>.xoo \_level1b;
{ SinOsc.arps(900).perc } +> \level4b **>>.xoo \__level1b;
{ SinOsc.arps(600).perc } +> \level5b **>>.xoo \___level1b;
#+END_SRC

** Example 3
:PROPERTIES:
:ID:       29092FD7-03B0-4E75-ABAB-55816D8858B4
:eval-id:  2
:END:

#+BEGIN_SRC sclang
{ SinOsc.arps(Rand(400, 500) * 5) } +> \level1 *> [0.05, 0.1].pseq;
//:
{ SinOsc.arps(Rand(400, 500) * 2.5) } +> \level2 **>.x_o \level1;
//:
{ SinOsc.arps(Rand(400, 500) * 2) } +> \level3 **>>.x_o \_level1;
//:
{ SinOsc.arps(Rand(400, 500) * 1) } +> \level4 **>>.x_o \__level1;
//:
{ SinOsc.arps(Rand(400, 500) * 0.6) } +> \level5 **>>.x_o \___level1;
#+END_SRC
* source *>.filterpattern task
:PROPERTIES:
:ID:       323F4572-818F-44AB-AD3A-7EB8FC336510
:eval-id:  4
:END:

Variants:
1. Play new source with filtered pattern on the task of a chuck

: { func } *>.pattern \chuck;

2. Play a chuck with filtered pattern on a named task

: \chuck *>.pattern \task;

3. Play a chuck with a filtered pattern on its own task, with a new time pattern
: \chuck *>.pattern timepattern;

4. (Extension of  3): Play new source to chuck and filter with pattern into new time pattern of own task

: { func } +> \chuck *>.pattern timepattern;

#+BEGIN_SRC sclang
\sine *>.xo \whistle;
#+END_SRC

1. Get TaskPlayer of same name as Chuck
2. Set its duration pattern
3. Get Tox named _chuckname (prepend _ to chuckname to indicate sub-pattern)
4. Set Tox'es filter pattern to xopattern.
5. Connect Tox to TaskPlayer
6. Connect Chuck to Tox
7. Start TaskPlayer
** 5

: { func } ++> \chuckname *>.xopattern \symbol;

1. Get TaskPlayer or filter named by \symbol.
2. If it is a TaskPlayer, then create Tox using prepend _ rule and connect it to the TaskPlayer.
3. Set Tox'es filter pattern to xopattern.
4. Connect Tox to TaskPlayer
5. Connect Chuck to Tox
6. Start TaskPlayer

* 6

How to create other types of filters and connect them to TaskPlayers / Chucks?

: ClassName (parameters) *> \taskplayerorfilter

: \chuckname *>.filtername ClassName (parameters) *> \taskplayerorfilter

: { func } ++> \chuckname *>.filtername ClassName (parameters) *> \taskplayerorfilter


Generally provide a name in creation of Task Filters like this:?

: ClassName(filtername, parameters ...) ?????

or:

: ClassName(parameters...) *> \task-or-filtername ???

Possibly keep adding _ to name, to denote level of chaining of filters...

It becomes easy to notate the desired filter compctly

: \chuckorchuckname *>.xopattern \a

: \chuckorchuckname *>.xopattern \_a

: \chuckorchuckname *>.xopattern \__a


etc.

Also it's possible to check if the parent pattern exists or the pattern to be modified/set etc exists. ...

* Alternative order of *>
:PROPERTIES:
:ID:       C02E10E7-D094-446C-A6CF-69181F973532
:eval-id:  8
:END:

=0.1 *> \test= and =\test *> 0.1= both set the duration pattern of a task.  However, their meaning is different:

=\chuckname *> pattern= will always switch the Chuck to the TaskPlayer with the same name.  Thus, if Chuck =chuckname= was previously playing under Task =anothertask=, it will stop playing with =anothertask= and start playing with Task =chuckname=.

In order to just set the duration pattern of a TaskPlayer without affecting which Chucks are playing with it, use the revers order:

#+BEGIN_SRC sclang
0.1
#+END_SRC

#+BEGIN_SRC sclang
{ SinOsc.arps(Rand(500, 1000)) } +> \test *> 0.1;
#+END_SRC

Therefore

: non-symbol, non-chuck *> \taskname;

Set pattern of \taskname task player and play

#+BEGIN_SRC sclang
[0.1.pn(20), 0.4.pn(5), 0.05.pn(40)].prand *> \test;
#+END_SRC

: non-symbol, non-chuck *>.xopattern \taskname;

if \taskname is a Tox type filter, set its pattern, else create a subfilter and connect it to taskplayer taskname, etc.

: non-symbol, non-chuck **> \taskname;

as =*>=, except do not start playing.
