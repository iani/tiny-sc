#+TODO: TODO STARTED | DONE CANCELED OBSOLETE REJECTED
#+OPTIONS: todo:t
* Underway

** STARTED MiniSteno

See MiniSteno.sc, MiniSteno class.

*** TODO redo of MiniSteno with incremental addition of connections
:PROPERTIES:
:DATE:     <2015-07-14 Tue 10:04>
:END:

**** TODO New re-simplified syntax and semantics
- Keep the syntax of () and []
- Connections act cumulatively. I.e. (a.c)(b.c) makes [a.b]c.  This makes it possible to write: ([a.b]x)([b.c]y) to create cross-connections.
- @ and / (cross-link and branch-out/copy-signal) become obsolete, since their configurations can be represented by () and [] alone, given the cumulative principle above.
- Use 2 messages: =addBranches= and =setTrees= to:
  1. Cumulatively add new connections with each new statement (=addBranches=)
  2. Reset all connections, creating a new global tree/forest (=setTrees=)

To consider: Pairwise operations:

- a removeReader: b
- a removeWriter: b
- a addReader: b
- a addWriter: b

***** Implementation draft/notes
:PROPERTIES:
:DATE:     <2015-07-16 Thu 20:23>
:END:

=setTree= : remove all buses and set group of all chucks to 0.  Then rebuild tree according to the specification given by the statement =specs.setTree=.

=addBranches= : add all connection pairs specified by the spec-string to the existing root tree.  Note: There is no way to replace a named sub-branch of the tree, because the branch may have been modified by addReader/Writer or removeReader/Writer and it is not always possible to identify which subtree that modification applies to.  Therefore:

Tree modification possibilities given under the present scheme are:

1. Reset the entire tree, replacing it with a new configuration.
2. Add a set of connections to the tree (add a list of reader-writer pairs).
3. Add a single connection.
4. Remove a single connection.

Not available is:

- Replace a subset of connections with a different subset (remove n connection pairs and add n connection pairs)

#+BEGIN_SRC sclang
"specs".addBranches;
#+END_SRC

The new version of MiniSteno stores two additional data items:

1. specstring : The string from which the mini steno was created.
2. connections : a list of pairs of connections, possibly as associations =reader->writer=, or for faster access as a dictionary with keys 'reader->writer' and values the associations =reader->writer=.

Only for the root-MiniSteno, the connections are used when replacing the old configuration with a new one, as follows:

1. Form a difference of the previous connections with the new ones, by creating three lists:
   1. toRemove: List of connections to be removed
   2. toAdd: List of connections to be added
   3. toKeep: List of connections that are the same
2. Remove all connections in list =toRemove=.
3. Add all connections in list =toAdd=.
Not needed? :
[4. Check that connections to be kept have not been removed and restore as needed.]

***** REJECTED Examples of rejected syntax from previous version
****** Link across to other branches of a tree

Using ser in ser (()) to branch out:
#+BEGIN_SRC sclang
"([a.b](c)(d.e))".addBranch;
#+END_SRC

Using cross-links to named busses to implement the same configuration as the previous example:

#+BEGIN_SRC sclang
"([a.b][c[d.x@]])[x@e]".addBranch;
#+END_SRC

Second example comparing cross-links to branch-out with ser in ser (())

#+BEGIN_SRC sclang
"(a[b.x@])(c[d[e.x@]])[x@f]".addBranch;
#+END_SRC

Following is equivalent to previous:

#+BEGIN_SRC sclang
"([(a.b)(c(d)e)]f)"
#+END_SRC

An example that cannot be coded using [] and () alone (with the old syntax)

#+BEGIN_SRC sclang
"((b[[l.x@][m.y@]])(a[x@x])(c[y@y]))"
#+END_SRC

With the new simplified syntax this would be:

#+BEGIN_SRC sclang
"(a.x)(b[(l.x)(m.y)])(c.y)"
#+END_SRC

****** Branching output out to a second bus

#+BEGIN_SRC sclang
"([a.b/y]x)([c.y@][y@y])"
#+END_SRC

Note ([2015-07-15 Wed 09:09]): Above - not correct equivalent to =([a.b]x)([b.c]y)=.  The above sends the output of a also to y (because of the parallel connection, and shared output bus of a and b. Therefore y would also get the output of a.  But we want y to get only the input of b and c, not of a, b and c. Therefore output of =b= must necessarily branch out both to x and to y with 2 signal-copy-links separately, because otherwise y would also get the input of a.  This shows the limits of this notation.  The algorithm for computing signal branch cross-links [[file:TODOs.org::*Compute%20necessary%20signal%20branch%20cross-links][below]] would create the correct configuration based on the short notation =([a.b]x)([b.c]y)=.

Equivalent in new simplified syntax:

#+BEGIN_SRC sclang
"([a.b]x)([b.c]y)"
#+END_SRC

**** New chuck interconnection principle: Check for cycles before adding each reader

IMPORTANT: Checking of cycles must be done for each chuck, BEFORE ADDING IT TO THE BRANCH, by checking amongst its writers, if it is already there.

Therefore: Before adding any chuck =r= as reader to some other chuck =w=, check do a backtrace of all writers of =w=. If =w= any of the writers of =w= (and their writers, recursively), are identical with =r= then:

1. Post a warning that =r= will not be added because it would create a cycle.
2. Skip =r=, i.e. do not add it as writer to =w=, but continue with adding any remaining chucks in the branch-construction process.

**** New tree sorting algorithm

For all those chucks that have no writers:

1. Place each chuck to head group (0)
2. For all its readers:
   - If
     1. the chuck encountered already has a group
     2. *AND* that group is higher or equal to that of the group of the parent (writer) + 1,
   - then do nothing - skip the current reader chuck and all its readers
   - else set the group of the current reader to writer + 1, and iterete the process with the readers of the reader.

**** Compute necessary signal branch cross-links

Iterate through all chucks (in any order, once) doing this:

For all readers of each chuck (in any order, once):

If the reader has not been connected,

1. If neither the reader nor the writer has a bus (... see details below)
2. If the writer has a bus (... see details below)
3. If the reader has a bus (... see details below)
4. If both the reader has a bus and the writer has a bus (... see details below)

In cases 2, 3, 4 above, must check if it is needed to create a split-bus copy signal link, depending on the existence of other readers/writers of the busses and chucks in question.

Additionally, write a method that posts all readers and writers of each chuck by tracing the actual bus interconnections, to aid in manual debugging and checkign the correctness of the algorithm .

The 4 cases one-by-one:

***** 1. Neither the writer nor the reader have a bus

Alloc new bus, add writer and reader to it.

***** 2. The writer has no out bus but the reader has an in bus

"Bringing in a new writer"

- Get all the readers attached to the reader's in bus. *NOTE: IMPORTANT:* Must include also those readers connected indirectly through link-copies to other buses.
- Check if all readers attached to the reader's in bus also have the new writer as writer.
  - If yes, then set the new writer's out bus to the old reader's in bus.
  - If no, then:
    1. For those readers that do not have the new writer as writer:  They keep reading from the old bus which was right for them anyway.
    2. Create a new bus that connects the new writer to the reader, and bring in the old signals to the input of the reader.
       1. Create a new bus.
       2. Set the output of the new writer to the new bus
       3. Set the input of the reader to the new bus
       4. Add a spliced copy of the signal of the previous reader's in bus to the new bus, thereby bringing in all existing outputs from previous writers.

***** 3. The writer has an out bus but the reader has no in bus yet

"Bringing in a new reader"

- Get all the writers attached to the writer's out bus.  *NOTE: IMPORTANT:* Must include also those writers connected indirectly through link-copies to other buses.
- Check if all writers writing to the writer's out bus also have the new reader as reader.
- If all writers writing to the writer's out bus are also writers of the new reader, then set the new reader's in bus to the existing out bus of the new writer.
- Else
  1. For those writers that do not have the new reader as reader: They keep writing to the old bus.
  2. Create a new bus that connects the old writer to the new reader and send out the old writers signal to the old readers.
     1. Create a new bus
     2. Set the output of the writer to the new bus.
     3. Set the input of the new reader to the new bus.
     4. Add a spliced copy of the signal of the new writer's out bus to the old output bus, so that previous readers do not lose the old writer.

***** 4. Both the writer has an out bus and the reader has an in bus

- If the out bus of the writer is the same as the in bus of the reader, then the reader and the writer are already connected.  No need to do anything.
- Else:
  1. Check if moving the writer to the readers bus or the reader to the writers bus would create a compatible connection
  2. Else create new bus and cross-copy previous reader and writer signals from their respective buses

**** Tests of the above algorithm 1.
:PROPERTIES:
:DATE:     <2015-07-15 Wed 09:18>
:END:

=([a.b]x)([b.c]y)=

***** Starting with writer =a=

1. a has one reader: x.
   1. connect a to x: both a and x have no bus, therefore create one and connect a to x through it.
2. proceed to b:
   1. connect b to x
      1. b has no bus, but x has a bus. Therefore introduce new writer b (case 2 above)
      2. Check if all readers attached to the reader's in bus also have the new writer as writer:
         The readers attached to the reader's in bus are x only.  X has the new writer as writer. Therefore:
         Set the out bus of the new writer (b) to the old readers bus (x).
   2. connect b to y:
      1. b has a bus but y has no bus.  Therefore introduce new reader y (case 3 above)
      2. Check if all writers writing to the writer's out bus  are also writers of the new reader
         The writers of the writer's out bus are: =a= and =b=.  Of these =a= is not a writer of y.  Therefore:
         1. Create new bus.
         2. Set the output of b to the new bus
         3. Set the input of y to the new bus
         4. Add a spliced copy of the new bus to the old output bus (the one connecting a to x). (x thus continues to receive/read signal from a and from b).
            (Note: Cannot add c to this new bus, because it would result in c being also sent to x, through the copy-link).
   3. Connect c to y
      1. c has no bus, but y has a bus, therefore introduce new writer =c=. (case 2 above).
      2. Check if all readers attached to the reader (y) in bus also have the new writer as writer:
         The readers attached to the the reader's in bus are y *AND X* (throught the copy-link on bus b-y which sends to x).
         Of these, the reader =x= does not have =c= as writer.  Thererfore:
         1. Create a new bus
         2. Set the output of c to the new bus
         3. Set the input of y to the new bus
         4. Add a spliced copy of the signal of the old bus (b-y) to the new bus, so that y still receives the output of b.

The configuration created by the above algorithm should be:

#+BEGIN_EXAMPLE
a    b    c
 \   |   /
  \ < > /
   |   |
   x   y
#+END_EXAMPLE

***** Starting with writer =b=

1. Start by connecting =b= with its first reader =x=.
   1. connect b to x: both a and x have no bus, therefore create one and connect b to x through it. (Case 1 above.)
2. proceed to the second reader of =b=, which is =y=.
   1. =b= has a bus, but =y= has no bus. Therefore introduce new reader =y= (case 3 above).
   2. Check if all writers writing to the writer's =x= out bus also have the new reader as reader.
      The only writer is =b=.  It has the new reader =y= as reader. Therefore:
   3. Connect =x= to =y=.

3. Proceed to =c=: Connect =c= to its only reader, =y=.
   1. =c= has no bus but =y= has a bus.  Therefore proceed to add new writer =c= (case 2 above).
   2. Check if all readers attached to the reader's =y= bus also have the new writer as writer:
      The readers attached to the reader's =y= bus are =x= and =y=.  =x= does not have the new writer =c= as writer.  Therefore:
      1. Create new bus.
      2. Set the output of =c= to the new bus
      3. Set the input of =y= to the new bus
      4. Splice a copy of the old bus (b-y) to the new bus (c-y). (=y= thus continues to receive/read signal from =b=).

4. Proceed to =a=.  Connect =a= to its only reader, =x=.
   1. =a= has no bus, but =x= has a bus, therefore introduce new writer =a=. (case 2 above).
   2. Check if all readers attached to the reader's (=x=) in bus also have the new writer as writer:
      The readers attached to the the reader's in bus are =x= and =y= (see steps 1, 2  and 3 above).  Note: =y= receives the output of =b= through a spliced copy, created in step 3.2.4 above.
      Of these, the reader =y= does not have =a= as writer.  Therefore:
      1. Create a new bus
      2. Set the output of =a= to the new bus
      3. Set the input of =x= to the new bus
      4. Add a spliced copy of the signal of the old bus (b-x) to the new bus, so that =x= still receives the output of =b=.

***** Starting with writer =c=

This should be symmetrical to starting with =a=.

**** Second test of same algorithm

=(a.x)([a.b]y)(b.z)=

...


#+BEGIN_EXAMPLE
a   b
|   |
|> <|
| | |
x y z
#+END_EXAMPLE

**** Algorithm for removing connections (deleting links)
:PROPERTIES:
:DATE:     <2015-07-16 Thu 20:42>
:END:

Given that one wants to remove the connection =w->r=.
1. Collect in list =rw= all reader-writer pairs that are connected through the bus which connects =w= to =r= (directly or indirectly through signal-copy link).
2. Set the output of =w= to nil and the input of =r= to nil (and also update readers/writers variables of the bus in question and free that bus if appropriate.)
3. Remove =w->r= from the list of reader-writer pairs collected in 1.
4. Reconnect all reader-writer pairs in =rw=.

Testing this algorithm with following configuration:

Start configuration:

=([a.b.c][x.y.z])=

#+BEGIN_EXAMPLE
a      b      c
|\     |     /|
| \\   |    //|
|      |      |
|//   \|/   \\|
x      y      z
#+END_EXAMPLE

The bus configuration is:

#+BEGIN_EXAMPLE
a b c
 \|/
  |
 /|\
x y z
#+END_EXAMPLE

Deleting connection of c to z.  New configuration:

=([a.b][x.y.z])(c[x.y])=

Target bus configuration is:

#+BEGIN_EXAMPLE
  c   a  b
  |    \/
  |---<|
  |    |
  /\   |
 x  y  z
#+END_EXAMPLE

Steps:

1. The reader-writer pairs in rw are: a->x, b->x, c->x, a->y, b->y, c->y, a->z, b->z, c->z.
2. Remove output bus from c and input bus from z.
3. Remove c->z from rw, the remaining pairs are: a->x, b->x, c->x, a->y, b->y, c->y, a->z, b->z.
4. Add writer a to x:
   1. a has bus and x has bus, and the bus is the same. do nothing.
5. Add a to y
   1. a has bus and y has bus, and the bus is the same. do nothing.
6. Add a to z:
   1. a has bus, but z not.  Therefore introduce new reader z (case 3 below).
   2. writers of a's out bus are: a and b.
   3. a and b do have z as reader. Therefore, set z to the outbus of a
7. Add b to x: (already connected)
8. Add b to y: (already connected)
9. Add b to z: (already connected)
10. Add c to x:
    1. c has no out bus but x has one. Case 2: new writer
    2. readers attached to x inbus are: x, y, z. But c should not write to z. Thus:
       1. create new bus
       2. connect c to x through new bus
       3. add spliced copy of the bus a-z to the new bus c-x
11. Add c to y:
    1. c has outbus and y has inbus, This is case 4. Thus:
       1. c's outbus is not the same as y's inbus.
       2. Moving c to y would result in leaving x without input
       3. Moving y to c is compatible.  Proceed.

DONE

**** CANCELED Alternative algorithm 1: Finding all shareable bus groups and bus-link pairs
:PROPERTIES:
:DATE:     <2015-07-15 Wed 11:52>
:END:

1. Start with any unvisited chuck (chucks already visited by the algorithm must be marked during the first time that they are visited)
2. Put the chuck in a new object =signal-sharer= contaning two sets of chucks (=writers= and =readers=), which forms a new candidate group for sharing a bus.  The sets of shared bus chucks are collected themselves in a list called =shared=.
3. For all its unvisited readers
   1. Check if they have the same writers.
   2. Check if their writers have the same readers.  As long as the same set of writers and readers is found, add the visited chuck to the current =signal-sharer= object, putting it in either the =writers= or the =readers= sets, according to its function when found in the traversal.
   3. When a chuck has been found that has a reader or a writer which is not shared by all the other chucks in the examined group:
      1. Mark the chuck just visited as =split-end-point=
      2. and the chuck from which this chuck was reached as =splice-point=, forming a pair that needs a signal-copying bus link to be created. (and also add it to a list of pairs that need copy-links, called =splits=)
      3. Also mark the chuck that no longer belongs to the readers or writers of the group being investigated as =bus-to-next-group=
   4. Continue with all other readers of the chuck and their writers
4. Repreat the process from 1 with the next unvisited chuck.

During the above traversal, mark each visited chuck, so that it does not need to be visited twice.

When all chucks have been visited:

1. Each =signal-sharer= object in the list =shared= is a group of readers and writers that can share one bus.  Link these accordingly.
2. For each pair in the list =splits=: (THE FOLLOWING NEEDS CHECKING:)
   1. create a new bus.
   2. attach it to the input or the ouput of the chuck marked as =split-end-point= and link it with a copy-bus to =splice-point=.  Create bus and link =split-end-point= to =bus-to-next-group= with it.

**** CANCELED Alternative Algorithm 2
:PROPERTIES:
:DATE:     <2015-07-15 Wed 22:13>
:END:

Find common subsets of readers and writers pairs ...
Problem: Which subsets are more economical?XS

*** Previous Work: MiniSteno version 0.1
:PROPERTIES:
:DATE:     <2015-07-14 Tue 10:04>
:END:

**** MiniSteno extended
:PROPERTIES:
:DATE:     <2015-07-04 Sat 22:58>
:END:
***** DONE Use . as a separator for names of chucks
:PROPERTIES:
:DATE:     <2015-07-04 Sat 23:45>
:END:

#+BEGIN_SRC sclang
  f = { | string |
      string = string.replace (".", "', '");
      string = string
      .replace("(", "', Ser('")
      .replace("[", "', Par('")
      .replace(")", "'), '")
      .replace("]", "'), '")
      .replace(", '')", ")");
      format("Par('%')", string);
  };

  f.("a.b(c[de(f)]x)abra.cadabra");

  //:
  // "a.b.c".replace (".", "', '")
#+END_SRC
***** DONE Use : separator to enable multiple custom inputs in one chuck
:PROPERTIES:
:DATE:     <2015-07-13 Mon 10:58>
:END:

#+BEGIN_SRC sclang
{ SinOsc.arp (300 * LFPulse.kr(1).range (4, 5)) } ++> \sine;
{ SinOsc.arp (400) } ++> \pulse;
{ Inp.ar (\in1) * Inp.ar (\in2) * 5 } ++> \ringmod;
#+END_SRC

#+BEGIN_SRC sclang
"(sine.ringmod:in1)(pulse.ringmod:in2)".addBranch
#+END_SRC
***** TODO Enable I/O to named busses for any branch
:PROPERTIES:
:DATE:     <2015-07-13 Mon 11:03>
:END:

****** Syntax for named busses and output-copy-links
:PROPERTIES:
:DATE:     <2015-07-13 Mon 11:31>
:END:

Use Par only for grouping one or more chucks that need named input or output

[inbus@chuck1.chuck2>outbus]

With optional input name specification for chucks chuck1:in1.chuck2:in1 etc.

For output-copy links use %:

[inbus@chuck1.chuck2%outbus]

******* REJECTED Try 1
1. for single chucks:

inbus@input:chuck>outbus

2. For whole MiniStenos

()

[]

****** Bus allocation algorithm for named busses and output-copy-links

******* In Par: [... [in@..>out] ...]

******* In Ser: (... [in@..>out] ...)

***** TODO implement addBefore, addAfter analogous to addBranch
:PROPERTIES:
:DATE:     <2015-07-13 Mon 11:12>
:END:


***** TODO implement output copy links in ChuckLink
:PROPERTIES:
:DATE:     <2015-07-13 Mon 11:13>
:END:


***** STARTED Direct creation of link in synth-function code { \sourcechuck.a ... } ++> \fxchuck
:PROPERTIES:
:DATE:     <2015-07-05 Sun 19:55>
:END:

Implementation requires storing the link request in a class var and then executing the link request after compiling the function to a SynthDef but before adding the resulting synthdef to the server via SynthDefLoader.

#+BEGIN_SRC sclang
{ \sourcechuck.a ... } ++> \fxchuck
#+END_SRC

Add \fxchuck serially after \sourcechuck.

: { \sourcechuck.a ... } ++> \fxchuck;

is a shortcut for:

#+BEGIN_SRC sclang
{ Inp.ar ... } ++> \fxchuck;
\sourcechuck &> \fxchuck;
#+END_SRC

Possible second shortcut =.ap= for =&>>=
u
**** OBSOLETE Modify the MiniSteno tree at any moment
:PROPERTIES:
:DATE:     <2015-07-04 Sat 23:45>
:END:
See above ...
***** STARTED Create named steno branches
:PROPERTIES:
:DATE:     <2015-07-06 Mon 12:05>
:END:

- "stenostring" &> \branchame; :: parses stenostring and puts the resulting subtree at the top level branch of the root tree (Par), replacing any previously existing tree in that position.
- \branchname.remove; :: ...?
- "stenostring" &> \root :: the root branch is the entire active tree.

***** Link two chucks on-the-fly
:PROPERTIES:
:DATE:     <2015-07-06 Mon 12:05>
:END:

Two basic operators/operations only:

1. \writer &> \reader :: compose Ser (writer.reader).  Cases:
  1. neither writer nor reader are
  2. writer is already in the tree but reader is not.  In this case insert reader after writer as follows:
     1. If writer is not in a ser, then create a ser:
        [x.writer...] becomes [x(writer.reader)...]
     2. If writer is in a ser (a.b.writer....), Insert reader after writer in existing ser: (a.b.writer.reader...).
  3. reader is already in a ser, but writer is not.  In this case
     1. asdf
  4. both reader and writer are already in the global ministeno tree.  In that case, do not change the tree, but issue a warning that the tree must be edited with an explicit ministeno specification.
2. \a <&> \b :: compose a and b in parallel.   The rules are analogous to 1 above.

****** earlier draft:
:PROPERTIES:
:DATE:     <2015-07-09 Thu 15:15>
:END:
- \source &> \effect :: Add \effect serially after \source, and only after source (not after any of its siblings).  If another chuck \previous is already connected serially to the output of \source, then add \effect in parallel to the existing one: (source.previous) becomes (source[effect.previous]).  But note:
     ([source.source2]previous) becomes:
     ([(source.effect)source2]previous)
- \source &>> \effect :: Add \effect serially after \source, and only after source (not after any of its siblings).  If another chuck \previous is already connected serially to the output of \source, then add \effect between \source and \previous.  (source.previous) becomes (source.effect.previous)

We may want to introduce also <& and <<& for adding siblings to the head of the pair.  Analysis:

Adding \w &> \r to the following trees, results:

******* case 1
before: x.y

after: x.y(w.r)

******* case 2
before: x.w

after x(w.r)

******* case 3

before:

after:

Shortcuts:
***** TODO prevent duplicate chucks in the steno tree
:PROPERTIES:
:DATE:     <2015-07-07 Tue 12:16>
:END:

See notes in: Symbol.asSteno.

***** TODO silence chucks removed from the steno tree
:PROPERTIES:
:DATE:     <2015-07-07 Tue 12:16>
:END:

The following needs to be run for the branch that is modified (branches above or besides this branch are not modified, and therefore do not need to run the following):

1. Get l = list of chucks contained in the branch before the modification.
2. Modify or rebuild (substitute) the branch and store it in var n.
3. For each chuck c in l: If c is not in n, then move c to null-group.  Note: The null group must have a tail synth that silences all outputs.

***** TODO Note: Only the tree being modified needs to be re-rendered for groups and busses
:PROPERTIES:
:DATE:     <2015-07-07 Tue 13:18>
:END:

***** TODO How many different insertion methods need to be implemented?
:PROPERTIES:
:DATE:     <2015-07-09 Thu 13:49>
:END:

What is the minimum number of methods needed to insert any chuck or subtree anywhere in the root tree?  Enumerate cases:

| writer status  | reader status | action                           |
| new in tree    | new in tree   | add (writer.reader) to root tree |
| already writer | of reader     | issue message, do not change     |
|                |               |                                  |
**** Thoughts for further refinement

- use "astring".asteno for audio config and "astring".ksteno for control config
- Do not use { } @>.param \chuck, because of the problem of naming the created k-chucks.  Stick with ksteno.  Perhaps use: { } @> \kchuck @>.param \achuck or:
  { } @>.param_k \achuck where k is the name of the kchuck.  The name of the chuck is _after_ the name of the parameter to enable one to use capital letters in the adverb to name kchucks whose name is a capital letter.
- At any moment there is only strictly one audio-rate MiniSteno and one control-rate MiniSteno tree active and stored in Library.
- For Audio: Strictly only the chucks contained in the latest compiled MiniSteno tree are audible.  The other chucks are not removed or stopped, but moved to the head of the nullGroup, and their out bus parameter set to 0.  Additionally, at the tail of the nullGroup, create a permanent synth that replaces out (ReplaceOut.kr()), with silence, sent to bus 0, for all channels of Server.default.options.numAudioOutputChannels.  This masks the output of any chucks that are still running but are not contained in the currently active MiniSteno tree. Note: These inactive chucks could also be paused at the moment that they are entered in the nullGroup - but this should be optional, for example for the case of chucks that play audio buffers, when it is desired to keep advancing the playback position.
- In the MiniSteno tree, each chuck has only one input (=in=) and one output (=out=).  However, one can create additional inputs and outputs that access the busses attached to inputs and outputs in other chucks, by using shortcut methods defined in the tiny-sc library that create In and Out ugens, by addressing the source or target chucks per name.  For example:

Read from the default audio output of chuck =x=.
#+BEGIN_SRC sclang
\x.ain  // or just: \x.a
#+END_SRC

Read from the audio output of chuck =x= named =out2=.
#+BEGIN_SRC sclang
\x.ain(\out2) // or just: \z.a(\out2)
#+END_SRC

Read from the default audio output of chuck =x= with an input of 2 channels.
#+BEGIN_SRC sclang
\x.ain(numChans: 2)
#+END_SRC

Read from the default audio output of chuck =x=, with =InFeedback.ar=:
#+BEGIN_SRC sclang
\x.fin // or just \x.af
#+END_SRC

etc.

Read from the default control output of (control rate) chuck =x=.
#+BEGIN_SRC sclang
\x.kin // or just: \x.k
#+END_SRC

etc.

Write to the default audio input of (audio rate) chuck =x=:

#+BEGIN_SRC sclang
\x.out(...)
#+END_SRC

Note that these shortcuts must be attached to the source chucks with notifications so that they change the numbers of their i/o channel when the source chuck's corresponding parameter changes bus index.

- Building the audio-rate mini-steno tree places the chucks in layered groups so that they stay in the correct order.
- While building the mini-steno tree, keep track of which chucks have been added to it.  Use this to:
  - Prevent that a chuck is added twice to the tree.
  - Move chucks that are no longer part of the tree to the nullGroup.
** STARTED ChuckPatternSource, EventPatternSynth
:PROPERTIES:
:DATE:     <2015-06-22 Mon 00:54>
:END:

Play EventPatterns in a Chuck.
*** ChuckPatternSource
Notes:

- Plays Event as EventPattern
- The Event is stored in an EventPattern.
- The EventPattern is stored in source.
- Chuck's args specify in and out bus and target.  Therefore they are copied to the event of EventPattern in source before playing.
- However, the Events generated by the EventPattern must play through a separate group, that is create inside the target group, and that serves to move those synths when the whole chuck needs to move to another group (target) because of linking I/O.  Therefore, the target of the event of the Event of the EventPattern must be replaced by that group before the EventPattern starts playing.
- The makeSynth function of ChuckEventPattern creates an EventPatternSynth, a subclass of Synth, which creates its own group inside the target group, and overloads method =moveToTail= to move its own group to the tail of the target instead of itself.  The details of EventPatternSynth are explained below.

*** EventPatternSynth
:PROPERTIES:
:DATE:     <2015-06-25 Thu 00:55>
:END:

Subclass of Synth
1. uses its own SynthDef, which copies signal from input to output wrapping it in a fade-envelope.
2. Overloads =moveToTail= so that instead of moving itself to the tail of the target, it moves the group that it is contained in to the tail of the target.  This is because it runs in a group created by EventPatternPlayer, which is used as target group for all synths created for the target.  The purpose of the group is to enable moving all synths of the pattern to a different group when the player is moved to a different part of the node tree for linking I/O.
3. on creation, does the following:
  1. Alloc new bus (happens immediately).
  2. Create group inside (tail) of target group (is asynchronous, must use onStart to start synth after it).
  3. Set the EventPattern's target to the newly created group.
  4. Create self as fade synth (asynchronous, use onStart to start pattern after it)
  5. Fade synth's doneAction frees group and all synths inside the group.
  6. Fade synths's onEnd notifies ChuckPatternSource to stop playing EventPattern.
  7. Start playing EventPattern.

Implementation notes for =new= method:

1. create own group
2. allocate bus
3. set source's eventpattern's fadeBus and target
4. then send self
5. start playing eventpattern
6. doneAction is free self, group, and synths contained in group
7. onEnd: free bus and stop EventStreamPlayer
8. set source's chuck's output to newly created instance of self.




** STARTED Investigate event sharing/filtering in Chuck (like in Tiny 0)

This is linked to using ().play as play method

Task could be generating the events to be shared. But how to access the shared data?

First steps:

- Passing task as argument to Chuck.play, and having task process Chucks args with its own data.

Next:

Design new class EventFilter that will either be a subclass of Event or contain one, and will respond to method =passArgs=


* Todo
** TODO MiniSteno Par: Use pre-loaded SynthDef for Link synths
:PROPERTIES:
:DATE:     <2015-06-19 Fri 14:24>
:END:
** TODO Test+write examples for Ser(Ser) nesting in MiniSteno
:PROPERTIES:
:DATE:     <2015-06-19 Fri 13:29>
:END:
** TODO Implement stopping (detaching/disabling) of Task Filters
:PROPERTIES:
:DATE:     <2015-06-19 Fri 13:29>
:END:
** TODO Chuck: Enable functions in args for dur filtering etc
:PROPERTIES:
:DATE:     <2015-06-12 Fri 11:58>
:END:


* Done
** DONE Optimize ChuckSynthSource
:LOGBOOK:
- State "DONE"       from "DELEGATED"  [2015-06-11 Thu 15:58] \\
  Done!
:END:
:PROPERTIES:
:DATE:     <2015-06-09 Tue 12:51>
:END:

Extend ChuckSynthSource with new subclass ChuckFuncSynthSource to add the SynthDef of the Synth source function when a new ChuckFuncSynthSource is created, and create synths with =Synth()= instead of ={ ... }.play=.

This is easy: =Chuck:source({ ... })= (called by: ={ ... } +> \aChuck=) always creates a new ChuckSynthSource instance.

Method ChuckFuncSynthSource:new:

- Construct the name of the SynthDef like this =format("<%>", name)=.
- Immediately construct and =add= the SynthDef, using Function:asSynthDef, possibly with modification of GraphBuilder.wrapOut to add fadeTime as control instead of as one-time-only (fixed) value.
- Use modified Function:play method (possibly named =add=) to /store synth name and notify the containing chuck (!) that it has completed loading/.

Method ChuckFuncSynthSource:prPlay:

Check if synthdef name is set.
- If it is nil, add ChuckFuncSynthSource instance as listener to the containing Chuck instance on message =defloaded= and create the new synth then.
- If it is not nil, play the new synth using the stored synthdef name string.

Note: The ChuckSource class hierarchy becomes:
- ChuckSource
  - Chucksynthsource :: play strings as DefNames with Synth()
    - ChuckFuncSynthSource :: play functions by adding them as SynthDefs and storing the string to play synths as soon as the def is loaded on the server.

** DONE Chuck: Store =out=, =fadeTime= in event, not parent
:LOGBOOK:
- State "DONE"       from "TODO"       [2015-06-11 Thu 15:59] \\
  done
:END:
:PROPERTIES:
:DATE:     <2015-06-09 Tue 14:04>
:END:

So that they be always included in args when playing ChuckSynthSource with new methods resulting from [[*Optimize%20ChuckSynthSource][Optimize ChuckSynthSource]].

** DONE Debug Tox addition to Tox
:LOGBOOK:
- State "DONE"       from "DELEGATED"  [2015-06-15 Mon 10:17] \\
  done
- State "DELEGATED"  from "WAITING"    [2015-06-15 Mon 10:17]
:END:
:PROPERTIES:
:ID:       4606C6B7-6175-46CB-B0F7-52434245CFBA
:eval-id:  4
:END:

Possibly the *>> operators add double dependants so re-adding makes the pattern play twice.

** DONE Fix rewiring of source from serial to parallel
:LOGBOOK:
- State "DONE"       from "TODO"       [2015-06-18 Thu 10:29] \\
  covered by MiniSteno
:END:

#+BEGIN_SRC sclang
//:
Server.default.queryAllNodes;
//: linking

\a +> \b;
{ WhiteNoise.arp } ++> \a;
{ Resonz.arps(In.ar(\in.kr), LFNoise0.kr(30).range(500, 5000)) } ++> \b;
//:


//:
{ Resonz.arps(In.ar(\in.kr), LFNoise2.kr(9).range(150, 500), 5) * 2 } ++> \b;
//:
{ In.ar(\in.kr) * 5 * Decay.kr(Dust.kr(3), 2)} ++> \c;
//: TODO: Fix it so that the following sequence of switches works
\a +> \c;
//:
\b +> \c;
//:
\a +> \b;
//:

\a.toRoot;

\b.toRoot;
#+END_SRC

** DONE Chuck: Rewrite scheduling using a separate class.
:LOGBOOK:
- State "DONE"       from "STARTED"    [2015-06-12 Fri 11:42] \\
  done
- State "STARTED"    from "DONE"       [2015-06-11 Thu 16:00] \\
  still working on removing old scheme, and completing filters
- State "DONE"       from "TODO"       [2015-06-11 Thu 15:59] \\
  done - but still working on filters
:END:
:PROPERTIES:
:DATE:     <2015-06-09 Tue 14:04>
:END:

- Should contain a task.
- Can register under same name as Chuck, but in its own subtree.

: ^Registry(ChuckTask, chuckName, { ChuckTask(chuck, pattern) })

Advantages:

- Simplifies Chuck by removing durStream, dur
- Allows sharing of TempoClocks by stopping Task instead of TempoClock.
- Simplifies and standardizes method for generating count + pattern for matching.
- May be used for playing timing structures generated by Org-Mode tables (see PatternLang.org).

** DONE Implement queue of synthdef sends for ().play in ChuckSource
:LOGBOOK:
- State "DONE"       from "TODO"       [2015-06-19 Fri 12:50] \\
  Done and tested.  Class: SynthDefLoader
:END:
:PROPERTIES:
:DATE:     <2015-06-18 Thu 10:32>
:END:

* Rejected/Cancelled/Obsolete
** OBSOLETE REDO Bus linking using @> and buslinks bound to symbols
:LOGBOOK:
- State "OBSOLETE"   from "!!!"        [2015-06-16 Tue 08:47] \\
  replaced by MiniSteno
:END:

See MiniSteno

For audio busses:

- \bus @>.input \chuck :: Chuck reads from this bus at parameter named by adverb ('input').
- \bus <@.output \chuck :: Chuck writes to this bus at parameter named by adverb ('output').

For control busses

- \bus %>.input \chuck :: Chuck reads from this bus at parameter named by adverb ('input').
- \bus <%.output \chuck :: Chuck writes to this bus at parameter named by adverb ('output').

But you can also use shortcuts:

"source.out>bus.numchans@effect1.in>bus.numchans@effect2".alink; // shortcut: al // = ar

"source.out>bus.numchans@effect1.in>bus.numchans@effect2".klink; // shortcut: kl // = kr
** CANCELED Complete implementation of BusLink unlink method
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2015-06-18 Thu 10:27] \\
  Covered by MiniSteno
:END:
** OBSOLETE Chuck: Store =target= in extra instance var?
:LOGBOOK:
- State "OBSOLETE"   from "TODO"       [2015-06-18 Thu 10:30] \\
  Planning to use ().play as main playing method.  This will require Target to be part of the Event that is played
:END:
:PROPERTIES:
:DATE:     <2015-06-09 Tue 14:04>
:END:
** OBSOLETE Investigate use of ().play as play method in ChuckSource
:LOGBOOK:
- State "OBSOLETE"   from "CANCELLED"  [2015-06-19 Fri 12:54] \\
  obsolete rather than cancelled - because overtaken by ChuckPatternSource
- State "CANCELLED"  from "TODO"       [2015-06-19 Fri 12:52] \\
  Mushy mushy mushy.  Behavior not so clear as current implementation with synth creation.  Instead, now defining new subclass of ChuckSynthSource, called ChuckPatternSource, which plays EventPatterns.
:END:
** CANCELED ChuckSynthSource+arp, perc: Use release for safer synth stopping
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2015-06-19 Fri 13:06] \\
  Current scheme with SynthDefLoader, dur self-freeing envelopes and release behaves well under all stress-tests so far.
:END:
:PROPERTIES:
:DATE:     <2015-06-12 Fri 11:58>
:END:
