#+TITLE: Matching patterns
#+DATE: Sat, Jun  6 2015, 21:17 EEST

* Overview
number_or_pattern |> \chuck // sched chuck using num or pattern for timing

'' |>.sub \master; // play x_o type pattern on sub chuck listening to master chuck

"" |>.sub \master; // play regex-matching string on sub chuck listening to master chuck

* x_o player

'' |>.sub \master; // play x_o type pattern on sub chuck listening to master chuck

* regex player

"" |>.sub \master; // play regex-matching string on sub chuck listening to master chuck

* table player

Use a table in Org-mode as a simple piano-roll type score.

|---+------+------+---+---+---+-----+---------------+-------------|
| ! |  rel |  abs | A | B | C | <A> | section_name  | section_dur |
|---+------+------+---+---+---+-----+---------------+-------------|
| # |  0.1 |    0 |   |   |   |     | first_section |         0.1 |
| # |  0.1 |  0.1 | x |   |   |     |               |         0.2 |
| # |  0.1 |  0.2 |   | y |   |     |               |         0.3 |
| # |  0.1 |  0.3 |   | . |   |     |               |         0.4 |
| # |  0.1 |  0.4 |   |   | d |     |               |         0.5 |
|---+------+------+---+---+---+-----+---------------+-------------|
| # |  0.2 |  0.6 |   |   |   |     | ha            |         0.2 |
| # |  0.2 |  0.8 | . | x |   |     |               |         0.4 |
|---+------+------+---+---+---+-----+---------------+-------------|
| # | 0.07 | 0.87 |   |   |   |     | finale        |        0.07 |
| # | 0.07 | 0.94 |   | o |   |     |               |        0.14 |
| # | 0.07 | 1.01 | a |   |   |     |               |        0.21 |
|---+------+------+---+---+---+-----+---------------+-------------|
#+TBLFM: $2=@-1::$3=@-1+$-1::$9=vsum(@-I$2..@+0$2)::@2$2=0.1::@2$3=0::@7$2=0.2::@9$2=0.07

The above table can be compared to a vertical piano-roll notation.
- Each row corresponds a successive point in time.
- The numbers of  the first column (=rel=) note the duration between successive rows.
- The numbers of the second column (=abs=) note the time elapsed from the beginning of the execution of the table (from the event of row 1).  They are calculated by the table from the =rel= row using a column formula.
- Each column after the =abs= column corresponds to one =Chuck= instance, as named in the header of the column.  Thus, the above table has three Chucks: =A=, =B= and =C=.
- The symbols at each row of the Chuck columns are names of actions to be executed on the Chuck of the corresponding column.  There are two default actions: =x= means =play= and =.= means =release=.  Any other names (strings that are converted by SC to symbols) can point to actions that are stored in library under 'ChuckAction', and that can be defined by the user.  They can be any function that is applied to the chuck in question.
- Columns whose names are enclosed in =<>= like this: =<A>= can be used to scheduel actions (Functions) that are evaluated independently of any Chuck instance.
- Horizontal lines inside the piano roll serve to separate different sections of a piece.  Column =section_name= is reserved to naming the sections, and =section_dur= can be used to calculate the partial duration of each section as well as the time of the events relative to the beginning of the section, with the formula: =vsum(@-I$2..@+0$2)=

** Tests
Org mode ...
Use org-table-to-lisp:

| 1   | 2   | 3   | 4   |
| a   | b   | c   | d   |
| asd | fgh | ili | oxo |

Resulting lisp is:
#+BEGIN_SRC elisp
(("1" "2" "3" "4")
 ("a" "b" "c" "d")
 ("asd" "fgh" "ili" "oxo"))
#+END_SRC

#+BEGIN_SRC elisp
(numberp (car (read-from-string "10.123")))
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC elisp
(symbolp (car (read-from-string "x10.123")))
#+END_SRC

#+RESULTS:
: t
