#+TITLE: Tiny-sc / Branch: retiny

/Compact coding tools for SuperCollider, with Emacs Org-mode intergration/

*Canis plenus et libum totum*

*(Libum mandere et habere)*

This is version 1.2alpha (=retiny=).

* Installation

- Download the library from http://github.com/iani/tiny-sc.
- Place the tiny-sc folder in the SuperCollider Extensions folder (found by executing this in SuperCollider):
  : Platform.userExtensionDir;
- Recompile the library (Command-Shift-L or menu Lang Recompile in the IDE).

* Introduction
:PROPERTIES:
:ID:       C9CDEADF-7149-4422-B02C-8D7A1F0C940C
:eval-id:  121
:END:

** Basic concepts
:PROPERTIES:
:ID:       5236B8F2-072A-4F5E-8C86-A001532D82B2
:eval-id:  761
:END:

Tiny-sc stores objects that create synths and tasks in the global Library under symbols, so that they can be recalled easily by their names, in order to play, start, stop, modify, and combine them.  There are two main types of objects: A =Chuck= is an object that can execute a function or create a synth.  A =TaskPlayer= is an object that plays tasks.  One can play a Chuck on its own, or one can attach a Chuck to a TaskPlayer in order to play a sequence of events.

=Chuck= and =TaskPlayer= each have their own type of operator:

- +> :: Do something with a Chuck
- *> :: Do something with a TaskPlayer

Set the source of a Chuck, and then play it:
#+BEGIN_SRC sclang
{ SinOsc.arps(Rand(400, 1000)).perc } +> \test0; // set the source
\test0.play; // play the source
#+END_SRC

One can use these separately, or one may combine them in a single expression.  Here is example of a combined use:

#+BEGIN_SRC sclang
{ LFSaw.arps(Rand(400, 1000)) * 0.3 } +> \test0 *> 0.1;
#+END_SRC

The above creates a Chuck =test0= playing the function as source, and schedules it to play events with a TaskPlayer named =test0=.  To stop the Task player, run:

#+BEGIN_SRC sclang
\test0.stop;
#+END_SRC

There are two variants of the above operators:

- ++> :: Send a new function or SynthDef name to a Chuck, and play it immediately. *NOTE: This also disconnects the Chuck from any task that it may be attached to.*
- **> :: Modify a TaskPlayer, but do not start it.

For example:

Send a new SynthDef function to Chuck =test0=, and play it:

#+BEGIN_SRC sclang
{ SinOsc.arp(Rand(1000, 2000)).perc } ++> \test0;
#+END_SRC

Send duration 2 to TaskPlayer =test0= and start it:

#+BEGIN_SRC sclang
2 *> \test0;
#+END_SRC

Send a func pattern as duration to TaskPlayer =test0=, but do not start it. Change will take effect at the next event played by the already playing TaskPlayer:

#+BEGIN_SRC sclang
Pfunc({ 0.01 rrand: 0.5 }) **> \test0;
#+END_SRC

Stop:
#+BEGIN_SRC sclang
\test0.stop;
#+END_SRC

** Synth Processes and their parameters
:PROPERTIES:
:ID:       5A4BBD0F-7722-42C9-8E7D-50E3AACCAF34
:eval-id:  233
:END:
Tiny-sc uses class =Chuck= to define containers that can run synths. It also defines some shortcuts for commonly used UGen combinations and patterns and for control UGen arugments such as amp, Pan and various envelopes.  Chuck instances are accessed by their name.  Playing a SynthDef function or a SynthDef name will start a new Synth and fade out the previous one:

#+BEGIN_SRC sclang
{ WhiteNoise.ar(0.1) } ++> \test; // ++> starts immediately
#+END_SRC

Play different synthdef, replace previous synth:

#+BEGIN_SRC sclang
"default" ++> \test; // play with SynthDef "default"
#+END_SRC

Parameters of a Chuck's synth process can be set as numbers:

#+BEGIN_SRC sclang
1000 +>.freq \test;
#+END_SRC

Or as patterns:

#+BEGIN_SRC sclang
(50..40).midicps.pseq +>.freq \test;
#+END_SRC

Play again, using the next values from argument patterns:

#+BEGIN_SRC sclang
\test.play;
#+END_SRC

Release with custom fade-out duration:

#+BEGIN_SRC sclang
\test.release(3);
#+END_SRC

** Starting and stopping, Tasks and Chucks

- Chuck :: =play= to start playing, =release= to stop playing
- TaskPlayer or Task filter :: =start= to start playing, =stop= to stop playing

In other words:

Play Chuck:
: \symbol.play

Start TaskPlayer or Task Filter:
: \symbol.start

Release (stop) Chuck:
: \symbol.release

Stop TaskPlayer or Task Filter

: \symbol.stop

** Playing sequences of synth events
:PROPERTIES:
:ID:       C169857C-C151-4D9B-8BC3-A588AD4FFE59
:eval-id:  188
:END:
A Chuck can play with a duration pattern, which runs in a TaskPlayer.  , which may be a single number:

#+BEGIN_SRC sclang
{Klank.arps(`[[40,60,120,200]*Rand(1,9),nil,(4..1)],PinkNoise.ar(0.1))}+>\test1*>1;
#+END_SRC

or a pattern:

#+BEGIN_SRC sclang
\test1 *> [Pn(0.05, 50) ! 2, Pn(0.2, 10), Pn(2, 2)].flat.prand;
#+END_SRC

Set the fadeTime to create texture of cross-fading tones:

#+BEGIN_SRC sclang
\test1.fadeTime = 1;
#+END_SRC

Stop the pattern that drives the Chuck:

#+BEGIN_SRC sclang
\test1.stop;
#+END_SRC

** Task Player filters
:PROPERTIES:
:ID:       33EC0959-E840-4DA0-9891-0692387E5332
:eval-id:  569
:END:

A Chuck can be driven by a TaskPlayer to run patterns in a similar way as Pbind.  The difference is that any key of a pattern as well as the duration pattern can be changed at any time.  Furthermore, a Chuck can switch TaskPlayers at any time, and can also be made to respond to a TaskFilter which only plays at beats that match a given condition.  In this way, several Chuck instances can be synchronized by following the same TaskPlayer or its attached filters.

Start the test2 Chuck with a SynthDef function, and a pattern:
#+BEGIN_SRC sclang
{ Blip.arps(\freq.kr(400), 3) } +> \test2 *> 0.1;
(60..90).midicps.prand +>.freq \test2
#+END_SRC

Add a second chuck to the same pattern:

(Note: =+>= waits to be triggered, and =**>= does not restart the task)

#+BEGIN_SRC sclang
{ SinOsc.arps(Rand(2000, 3000)).perc } +> \twock **> \test2;
#+END_SRC

Currently there is only one kind of filter, which is created by adding an adverb with its pattern to the =*>= operator.  The adverb may consist of characters =x=, =o= and =_=.  Their meanings are:

- x :: play new note for this beat.
- o :: stop note, remain silent.
- _ :: hold previous note (do not release).

*Important: The subfilter to a Task is registered under its own name, which is created automatically by prepending underscore =_= to the name of the parent task.*

In the example below, the filter task of =test2= has the name =_test2=.

Example:

#+BEGIN_SRC sclang
\test2 **>.xooox___x_xo \test2; // **> : Do not start parent task
#+END_SRC

Remove chuck named =test= from its task - but leave the other Chucks still attached:

#+BEGIN_SRC sclang
\test2.removeTask;
#+END_SRC

Stop the task, and all it's dependent Chucks:

#+BEGIN_SRC sclang
\test2.stop;
#+END_SRC

Here is a more complicated example:

#+BEGIN_SRC sclang
"default" +> \high; // set source of chuck high
Pwhite(70, 90, inf).midicps +>.freq \high; // set frequency pattern for high
{ Blip.arps(Rand(50, 200), Rand(1, 10)).perc * 1.2 } +> \low; // set source of chuck low
\high **> \low; // Make high follow task pattern of low
\low *> 0.1;   // Set and start task pattern of low to play beats at 0.1 seconds
#+END_SRC

Let =high= play a sub-pattern of the TaskPlayer =low=.

#+BEGIN_SRC sclang
\high **>.xooox___x_xoxoxx \low; // creates filter \_low and attaches chuck \high to it
#+END_SRC

Change the duration pattern of master Task =low=:

#+BEGIN_SRC sclang
\low **> Prand([Pn(0.08, 4), 0.3], inf);
#+END_SRC

Make both =high= and =low= play on the same filter of =low= Task;
#+BEGIN_SRC sclang
\high **>.xooox___xxox_xxxx \low; // create filter \_low and attaches chuck \low to it
\low **> \_low; // also make chuck low follow filter \_low
#+END_SRC

Change base beat pattern and reset =low= to that root pattern:
#+BEGIN_SRC sclang
\low **> 0.2;
#+END_SRC

Change base beat pattern again:
#+BEGIN_SRC sclang
\low **> Prand([Pn(0.12, 4), 0.3, 0.6, Pn(0.06, 2)], inf);
#+END_SRC

Synch chuck =low= with chuck =high= again:
#+BEGIN_SRC sclang
\low **> \_low; // also make chuck low follow filter \_low
#+END_SRC

Stop the master pattern:

#+BEGIN_SRC sclang
\low.stop;
#+END_SRC

** Adding Task filters to Task filters

=\name *>.pattern \othername= Adds a pattern filter to =othername=, *or substitutees the new pattern to an existing pattern filter =othername=*.  In order to add a new pattern filter under an existing pattern filter, use the operator =*>>= or =**>>=.

Examples:

*** Example 1
:PROPERTIES:
:ID:       A5F476EA-3CC8-4DAE-877D-8920CC1B5F07
:eval-id:  113
:END:
#+BEGIN_SRC sclang
{ SinOsc.arps(2000).perc } +> \level1a *> 0.1;
#+END_SRC

#+BEGIN_SRC sclang
{ SinOsc.arps(1800).perc } +> \level2a **>.xo \level1a;
#+END_SRC

#+BEGIN_SRC sclang
{ SinOsc.arps(1500).perc } +> \level3a **>>.xo \_level1a;
#+END_SRC

Add =level1a= as pattern filter of the master task =leval1a=:

#+BEGIN_SRC sclang
\level1a *>.xooxxoxxx \level1a;
#+END_SRC

#+BEGIN_SRC sclang
\level1a.stop;
#+END_SRC

*** Example 2
:PROPERTIES:
:ID:       A8822947-5653-4EB7-8628-6C835652BF5E
:eval-id:  53
:END:
#+BEGIN_SRC sclang
[1800, 2000, 2400].pseq +>.freq \level1b;
{ SinOsc.arps(\freq.kr(400)).sine } +> \level1b *> [0.1, 0.2].pseq;
{ SinOsc.arps(1500).sine } +> \level2b **>.xoo \level1b;
{ SinOsc.arps(1200).sine } +> \level3b **>>.xoo \_level1b;
{ SinOsc.arps(900).sine } +> \level4b **>>.xoo \__level1b;
{ SinOsc.arps(600).sine } +> \level5b **>>.xoo \___level1b;
#+END_SRC

As explained above, the task-filters are stored under names generated automatically by prepending =_= to the name of the parent task.

#+BEGIN_SRC sclang
\level1b.stop;
#+END_SRC

** Linking audio inputs and outputs between synths
:PROPERTIES:
:ID:       EA903FD5-9FE9-4B0A-BEE0-B38C8807810E
:eval-id:  1002
:END:

A mechanism for linking inputs and outputs and of audio and control-rate Chucks based on /Steno/ by Julian Rohrhuber is under development. (See https://github.com/telephon/Steno)

Currently, the mechanism works with Chucks whose names are only single letters, as is the case with /Steno/, and is only implemented for audio-rate Chucks.

/(Note: Facilities for modifying the tree structure created by compiling a Steno string are under preparation.  When completed, these will allow to add Chucks with longer names to the tree, and to link Chucks without running a Steno string.)/

First example:

Add 2 chucks =a= and =b= linked together in series:

#+BEGIN_SRC sclang
"(ab)".arlink;
{ WhiteNoise.arp } ++> \a;
{ Ringz.arp(Inp.ar, LFNoise2.kr(1).range(30, 1000), 1) * 0.2 } ++> \b;
#+END_SRC

Remove the effect from the audible tree:

#+BEGIN_SRC sclang
"a".arlink
#+End_src

Bring back the effect and add a second effect to it, serially:

#+BEGIN_SRC sclang
"(abc)".arlink;
{ Inp.ar.abs * LFNoise0.kr(10) } ++> \c;
#+END_SRC

Linking effects in parallel:

First listen to a single effect in series
#+BEGIN_SRC sclang
"(ab)".arlink;
{ Blip.arp(LFNoise2.kr(1).range(40, 400), 5) * 2 } ++> \a;
{ Ringz.ar(Inp.ar, LFNoise1.kr(25).range(30, 1000)) * 0.002 } ++> \b;
#+END_SRC

Add a second effect in series
#+BEGIN_SRC sclang
"(abc)".arlink;
{ Inp.ar.abs * LFNoise0.kr(10) } ++> \c;
#+END_SRC

Now in parallel
#+BEGIN_SRC sclang
"(a[bc])".arlink;
{ Inp.ar.abs.sqrt * LFNoise1.kr(5) * 0.1 } ++> \c;
#+END_SRC

Vary the effects:
#+BEGIN_SRC sclang
{ Limiter.ar(Ringz.ar(Inp.ar, LFNoise1.kr(10).range(300, 4000)), 0.02) } ++> \b;
{ Inp.ar.sqrt.abs * SinOsc.ar(LFNoise0.kr(10).range(1000, 2000)) * 0.05 } ++> \c;
#+END_SRC

Add slow variations in amplitude to distinguish:
#+BEGIN_SRC sclang
{ Limiter.ar(Ringz.ar(Inp.ar, LFNoise1.kr(10).range(300, 4000)), 0.02) * LFNoise1.kr(0.3) } ++> \b;
{ Inp.ar.sqrt.abs * SinOsc.ar(LFNoise0.kr(10).range(1000, 2000)) * 0.05 * LFNoise1.kr(0.3) } ++> \c;
#+END_SRC

** Multiple voice example
:PROPERTIES:
:ID:       CDEFFE5C-E976-4D0C-9983-A5E27467AB0F
:eval-id:  292
:END:

Just a demo with 8 Chuck instances playing on 8 different TaskPlayers.

#+BEGIN_SRC sclang
  (
  { | n |
      var name;
      name = format("multi%", n).asSymbol;
      n = n % 4;
      {
          Blip.arps(
              1 + n / 2 * Line.kr(Rand(20, 80).midicps, Rand(20, 80).midicps, Rand(0.1, 1)),
              Line.kr(Rand(5, 25), Rand(5, 25), 0.5)
          ).perform([\perc, \sine]@@n)
      } +> name;

      ([0.25.pn(14), 5 ! 3, 1, 2, 0.1 ! 10, 3] / (0.5 + (n / 4))).flat.prand *> name;
  } ! 8;
  )
#+END_SRC

Use task filters to change density of the texture:

#+BEGIN_SRC sclang
\multi0 **>.xoooo \multi0; // use **> to prevent re-starting the master Task
\multi1 **>.xoooo \multi1;
\multi2 **>.xoooo \multi2;
\multi3 **>.x \multi3;
\multi4 **>.xoooo \multi4;
\multi5 **>.xoooo \multi5;
\multi6 **>.xoooo \multi6;
\multi7 **>.xoooo \multi7;
#+END_SRC

Variation 1:

#+BEGIN_SRC sclang
\multi0 **>.xoooo \multi0;
\multi1 **>.o \multi1;
\multi2 **>.o \multi2;
\multi3 **>.x \multi3;
\multi4 **>.o \multi4;
\multi5 **>.o \multi5;
\multi6 **>.o \multi6;
\multi7 **>.xo \multi7;
#+END_SRC

Variation 2:

#+BEGIN_SRC sclang
\multi7 **> \multi7;
\multi6 **>.xo \multi7;
\multi5 **>>.xo \_multi7;
\multi4 **>>.xo \__multi7;
\multi3 **>>.xo \___multi7;
\multi2 **>>.xo \____multi7;
\multi1 **>>.xo \_____multi7;
\multi0 **>>.xo \______multi7;
#+END_SRC

Variation 3:

#+BEGIN_SRC sclang
\multi7 *> 0.1;
#+END_SRC

Variation 4:

#+BEGIN_SRC sclang
([0.25.pn(14), 5 ! 3, 1, 0.4 ! 10, 0.1 ! 20, 3] / 4).flat.prand *> \multi7;
{ | n | Pfunc({ 0.01 exprand: 0.35 }) +>.amp format("multi%", n).asSymbol } ! 8;
#+END_SRC

Variation 5:

#+BEGIN_SRC sclang
([0.25.pn(14), 5 ! 3, 1, 0.4 ! 10, 0.1 ! 20, 3] / 4).flat.prand *> \multi7;
\multi7 **> \multi7;
\multi6 **>.xo \multi7;
\multi5 **>>.xo \_multi7;
\multi4 **>>.xo \__multi7;
([0.25.pn(14), 5 ! 3, 1, 0.4 ! 10, 0.1 ! 20, 3]).flat.prand *> \multi3;
\multi3 **>.xoo \multi3;
\multi2 **>>.xoo \_multi3;
\multi1 **>>.xoo \__multi3;
\multi0 **>>.xoo \___multi3;
#+END_SRC

To end the sound, stop all tasks:
#+BEGIN_SRC sclang
TaskPlayer.stopAll;
#+END_SRC

Now gradually build some background texture and rhythms with the same synth sources:
#+BEGIN_SRC sclang
0.01 *> \multi0;
#+END_SRC

#+BEGIN_SRC sclang
0.1 *> \multi1;
#+END_SRC

#+BEGIN_SRC sclang
\multi2 **>>.xo \multi1;
0.5 +>.amp \multi2;
#+END_SRC

#+BEGIN_SRC sclang
\multi3 **>>.xo \_multi1;
#+END_SRC
** Speed Limits
:PROPERTIES:
:ID:       0CE4F19D-DD04-439B-86AE-CDC6343E5882
:eval-id:  96
:END:

Using the precise SynthDef loading method of =SynthDefLoader= as of v1.2.2alpha, playing patterns with up to 500 events per second is safe, with light-weight SynthDefs. when this there is only one task-thread playing, and dependent on general CPU capacity and other load on the machine.  See: StressTests.scd.
